'''
# 나무 길이 + 성장 속도 리스트에 저장

# 현재의 길이보다 얼마나 성장하느냐가 중요함

# 예시
10000 100 2 4 5  
  5    99 10 2 7
  
# 나무는 한 번 자르면 0으로 초기화되어서 첫날 나무의 길이가 10000이라고 하더라도
# 둘째 날에는 10005밖에 안 되므로 중간에 10000을 그냥 자르고, 다른 나무에서 더 큰 이득 취해야 함

2 3   1010 1000    1
4 10   99   100  10000

이 케이스 생각해보면서 좀 헷갈렸는데 

셋째 날 1010 - 99 : 1307
셋째 날 1000 - 100 : 1300

넷째 날 1010 - 99 : 1406
넷째 날 1000 - 100 : 1400

셋째 날 1010 - 99 + 넷째 날 1000 - 100 : 총 1707의 이득
넷째 날 1010 - 100 + 넷째 날 1010 - 99 : 총 1706의 이득

40001 - 1400 - 1307 - 13 - 2 : 42723
1010 -> 99 -> 99 -> 1400 -> 40001 : 42609
애매한 케이스들을 고려해봐도 성장속도에 맞춰 자르는 것이 최우선임을 알 수 있음

1010을 먼저 자르는 게 이득 아닐까? 했는데
어차피 날짜 지나면 한번에 자를 수 있기 때문에 그 앞에 자잘한 애들 (2, 3)이라도 얻어 두는 것이 이득
즉, 어차피 같은 걸 자르는 순간 손해임

=> 무조건 성장 속도로 정렬하기!



'''

n = int(input())
hi = list(map(int, input().split()))
ai = list(map(int, input().split()))

check = []

for i in range(n):
    check.append([hi[i], ai[i]])
    
check.sort(key = lambda x: x[1])

print(check)
total = 0
for i in range(n):
    total += check[i][0] + check[i][1] * i
    
print(total)